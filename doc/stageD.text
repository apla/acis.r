Stage D: full-text links, document-to-document links and fuzzy name searches 
============================================================================

<toc/>


At this moment fuzzy name searches are the most complicated to my eye.
Although I remember it wasn't too difficult when we designed it with
Thomas in Moscow last year.  Let's try to wrap my head around it.


<h2 id='fuzzy'>Fuzzy name searching</h2>


### notions

name expressions reduced 1 -- the name expressions that only appear
once in the data.

name expressions reduced 2 -- the name expressions that do not exactly
match an existing name variation.

istance level = Levenshtein distance / string length of the name variation

The default critical distance level of distance is 1/m, i.e. 1/7 

i.e. if the Levenshtein distance is 2 and the name variation's length
is 20, the distance level is 2/20 = 0.1 ; O.1 is less then 1/7, so,
this would be a successful and positive match.



### configuration parameters

- fuzzy-name-search -- on or off

- fuzzy-name-search-min-common-prefix -- The number of characters n
  of at the start of a name variation that has to match in the name
  expressions exactly.  Default: 3.

- fuzzy-name-search-min-variation-length -- The minimum number of
  characters m that a name variation would have to have in order to
  qualify for being fuzzy matched. The default is 7.

- fuzzy-name-search-max-name-occurr -- The maximum number of
  occurrences of a name expression in the name expression table before
  it is considered for fuzzy matching. The default is 1. If this
  parameter is set to 0, no maximum is checked.

- fuzzy-name-search-name-set-width -- The fuzzy search can be on full
  dataset of the name expressions 0, the reduced name expression 1, the
  reduced name expressions 2, or the reduced name expressions 3,
  i.e. 1+2. The default is 3.


### implementation components

1. given a set of name expressions (i.e. document author names) compare
   it to a set of name variations and find close matches.

2. given a name variation and an ACIS configuration, find all relevant
   name expressions, which should be fuzzy-compared to that variation.

mysql> select name,count(name) from testrdb.res_creators\_separate group by name;

mysql> select name,count(name) from names group by name;




<h2 id='fturls'>Full-text file recognition</h2>


### notions

### input

authoritative:

    <text id=".."> 
     <file>
      <url>url</url>
     </file>
    </text>

automatically found:

    <text id=".."> 
     <hasversion>
      <text>
       <file>
        <url>url</url>
       </file>
      </text>
     </hasversion>
    </text>


### user choices

In the recognition menu, there are four mutually exclusive options.

   1. This is not a file related to this paper.
   2. This is a web page describing the paper.
   3. This is a full-text file for another version of the paper.
   4. This is a full-text file for this version of the paper.

The default is option 4.

The options will be expressed in shorter words, but there will be a help button.

The premissions menu is only shown if one of the last two options has
been chosen. In the permission menu, there are two options

   1. This full-text file may be archived as is.
   2. This full-text file may be archived, but check for updates.
   3. This full-text file may not be archived.

The default is option 1.

Co-authors may make contradictory choices. An ACIS installation records
such choices, but does not resolve them.



### configuration parameters

- full-text-urls-recognition -- on or off


### data tables

table: **ft_urls**

- dsid char(14) not null
- url char(255) not null
- fullurl text 
- checksum char(22)
- nature ENUM('authoritative','automatic')

<co>PRIMARY KEY( dsid, checksum )</co>

The question is what would happen to the URLs which are longer than the
255 limit?  ok, if we do not 

table: **ft_urls\_choices**

- dsid char(14) not null
- url char(255) not null
- as an alternative: checksum CHAR(22) not null
- psid char(14) not null
- choice char(2) NOT NULL. Value first char: d|y|r|n (corresponding
  menu items: 2|4|3|1).  Value second char: y|c|n (1|2|3)
- time datetime not null


### data structures

userdata record -> {fturls} is a list of (document,url,choice1,choice2,date?)
packages?

do we really need to store it in the userdata?  We could, but this
becomes a pretty expensive storage, does it not?  But, on the other
hand, that's what the userdata is for.  That is its primary purpose: to
hold what the user has told us.  Hmm.  

We could, of course, try solving it by using another storage method,
e.g. Storable would pack things in a much more compact way.


### implementation components

1. input processing, ft_urls table making

2. recording user choices, inserting into ft_urls\_choices

3. reading previous user choices

4. user screen

One idea is that we can create a special vacuum process for the
ft_urls\_choices table.  It would scan the table and if for the same
person/document/url there are several decisions, it would delete the
old ones, and only leave the most recent one.



<h2 id='d2d'>Document to document links</h2>

### notions

link type -- has a name, description and, possibly, a reverse link type
name; some link types have no reverse.



### configuration

- document-document-links-profile -- yes / no

- document-document-links-types -- ?

### 

