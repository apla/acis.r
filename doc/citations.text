Citations in ACIS
=================

Sections marked "Technical:" will hold the implementation
issues, not functional requirements.

<toc/>

## Introduction

### Why? What for?

*Motivation.*  Authors learn who cites their works.  This supports further
research dialogue.  Services get better citations data.  Output data is useful
for other researchers (via services that are based on this data).

 - Will use part of section 2. Background on ACIS of
   the Helsinki document for this.

### Approach

First level: autonomous citation indexing.  (Citations
processing with an automated reference and citation parsing
system.)  Second level: human users check, filter and
validate the data.


## Citations data on input

Data comes from automatic reference and citation parsing
systems.  Examples: CiteEc, CiteSeer.

*Structure of the data and its format.  Naming of files the
data comes in.*

    <amf ...>
      <text ref="id1">
        <reference>
          <literal> text of citation </literal>
        </reference>
        <reference>
          <literal> another citation </literal>
        </reference>
        ...
      </text>

      <text ref="id2">
        ....
      </text>
      ...
    </amf>



### Configuration

Configure a new <a ref='collection'>metadata collection</a>
via the <c>metadata-collections</c> parameter.  Set
<c>metadata-X-type</c> to "CitationsAMF".

*Configuration example.*


### Technical: processing the citations data

*The data processing flow.*  RePEc::Index and
RePEc::Index::Collections::CitationsAMF to
ACIS::Citations::Input via the collection's proc parameter.

Citations table structure:

    document id | normalized searchable citation string | full original citation text

SQL create statement:

    CREATE TABLE $acisdb.citations ( 
           docid   CHAR(255),
           nstring CHAR(255), 
           ostring TEXT );

*TODO:* Add character set and collations to the table
definition?  Also: make it configurable?  (Probably not.
Instead, configure it globally for the database.)

*TODO:* add this table to the <a href='db.html'>Database
tables</a> document.

*Citation string normalization:* Put it through Unicode
decomposition, convert letters to upper case, add a space
after each dot and each comma, remove spaces after a dot if
a comma follows it, compact all whitespace, remove starting
and trailing whitespace.

*Searchable citations string part -- cutting out the editors
part.* *(Configuration; possibly through a perl function.)*


## Citations profile

*Functional overview: process new citations and review those found before.*

*Principles.*  Should not look or work much different from
the research profile.  We must maintain consistency here.

*Search for citations: background and online.  Sub-screens: identified,
refused, autosearch, unidentified (same as autosearch).*



### The `New citations found' screen

*Verification and Identification.  "Interesting" documents.  Detailed
description of the user interface.*


### Identified citations screen

Will show all the verified and identified citations, listed
by the document they refer to.  

### Refused citations screen

### Unidentified citations screen

It will look like and work in the same way as the "New
citations found" screen.  The difference is that the "New
citations" screen will be shown up automatically when a user
enters the citations profile and there are new citations for
the profile.  But the "Unidentified citations" screen will
be called by the user himself.




### Configuration

<a href='conf.html'>main.conf</a>, <co>[ACIS]</co> section:

 - citations-profile parameter;

 - citations-profile-online-search parameter.

*String similarity assessment function parameter.*


### Technical: search for citations

*Background and foreground search.  Connection with ARPU.*

Will be done in a similar way to how the research search
works now.

### Technical: citation to research items similarity 

*Citation-to-document similarity assessment algorithm.*

For every item of the research profile and for every
citation:

1. Compare titles.  Take the normalized citation string and take the normalized
title of the research item.  Find where in the citation
string the first word of the title is present.

Take as many characters of the citation string as there are
in the title and compare them to the work's title (with
[String::Similarity](http://search.cpan.org/perdoc?String::Similarity)).

(Alternatively, find where in the citation string the last
word of the title is present and take a substring from start
to end.  Compare in the same way.)

2. Check if the first author's name is present in the citation

3. Check if the other authors' names are present in the citation

4. Check the publication year of the document, is it present
   in the citation?

5. Check the publication status of the document.  Is there
   anything similar in the citation string?



Get the comparison result as a number between 0 and 1.


*Similarity matrix.*


### Technical: userdata structure

*Citations branch:*

 - identified

 - refused

 - unidentified



## Citations data output

*Structure and format.*

*Also, probably, this section should cover display of the
identified citations to the general public on the personal
profile pages, that ACIS generates.*




