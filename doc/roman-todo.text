# Workplan for Roman


## Level 1 - AMF generation

AMF-perl:

  - File: lib/AMF/Noun.pm

    - subroutine stringify(): Add XML escaping of text data;
      Follow [XML Spec](http://www.w3.org/TR/REC-xml),
      section 2.4 Character Data and Markup.

    - subroutine stringify_attributes(): add XML escaping to
      attribute values (similar to above, but adds quotation
      escaping)
    

EPrints:

  - Find out why EPrints::EPrint::commit() function (method)
    is called twice for each eprint commited.  Find a fix or
    a work-around.

     - use logging -- the commented logit() function of the
       ACIS::EPrints::MetadataExport::AMF module for control
       and checking the call-stack



## Level 3 - Author/person identification aid

General, ACIS::PIDAID:

  - find\_by\_name(): 

      - change SQL query in it to a fitting JOIN-query, that
        would search acis.names table and get record data
        from acis.records

        - duplicate records shall be excluded

  - make find\_by\_email() 

      - calculate MD5 checksum from the EMAIL parameter
        given:

                require Digest::MD5;
                my $emailmd5 = Digest::MD5::md5( lc $email );

      - search acis.records table by the MD5 checksum; as in
        find\_by\_name()

  - make find\_by\_shortid()

EPrints:

  - install EPrints

  - install ACIS' extensions

  - cgi/pidaid 

     - create ACIS::PIDAID object just once and save it a
       global variable -- take advantage of mod_perl
       environment

     - implement search by shortid and search by email
       (use search by name as example)

  - pidaid.js:

     - fix page jumping when user selects a menu item --
       give focus to an input box before hiding the menu?

          - or hide the menu gradually?
 
     - id input field:    

         - add functions to set id field status: null / valid
           / invalid; set class and title attributes of the
           id input element respectively

         - reset id status to valid when user chooses an item
           from a menu

         - clear the status when user is editing id field

         - set the status when search results arrive

     - make search results processing function
       process\_search\_results() aware of what search it was
       running for (by name, by email or by short-id)

     - add checking to the id field 

         - use regular expressions to see if the value looks
           like an id or an email

         - search accordingly

     - make table presentation of records menu as shown in
       illustrations of [eprints.html](eprints.html) and in
       prototype
       <f>ACIS-distribution/EPrints/prototype-menutable.html</f>

     - test and find a fix for Unicode issue in names in
       search results (find "XXX UNICODE" mark in source)

         - test in different browsers


     - initial handlers installation optimization:

        - check that there are any personal name input
          controls on the page before doing anything else.

        - check XMLHttpRequest presence before
          assigning event handlers.

     - check, fix and clear all XXX marks in pidaid.js



## Level 4:

ACIS:

  - server part

      - add configuration parameters to the
        ACIS::Web::Config module:

           - list of allowed IP addresses 

           - list of known requesting archives

           - mirroring function

      - define screen in the <f>home/screens.xml</f> file

      - write screen handlers

  - client part: update request module ACIS::MetaUpdate::Request


EPrints:
 
    - add the ACIS::MetaUpdate::Request module to EPrints,
      tie it to appropriate hooks in MetadataExport::AMF

RAS:

    - write mirroring function for RePEc
 
      - build a map: archive id -> accesspoint URL

      - configuration: path to local RePEc/remo dir
