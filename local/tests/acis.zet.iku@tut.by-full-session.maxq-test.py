# Generated by MaxQ [com.bitmechanic.maxq.generator.JythonCodeGenerator]
from PyHttpTestCase import PyHttpTestCase
from com.bitmechanic.maxq import Config

global validatorPkg
if __name__ == 'main':
    validatorPkg = Config.getValidatorPkgName()
# Determine the validator for this testcase.
exec 'from '+validatorPkg+' import Validator'


import re
#import string

# definition of test class
class acis(PyHttpTestCase):
    def runTest(self):

        self.msg('Testing ACIS (acis.zet)')

        self.setCharset( 'UTF-8' );

        params = [
            ('''login''', '''iku@tut.by'''),
            ('''pass''', '''passwd'''),
            ('''do''', '''Login'''),]
        self.msg("Testing POST to URL: %s" % self.replaceURL('''http://acis.zet/'''))
        url = "http://acis.zet/"
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)

        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 1 failed", 302, self.getResponseCode())

        redirect = self.getResponseHeader()['Location']
        self.msg( "redirected to: %s" % redirect )
        if redirect:
            sid = re.search( r"\!([\da-f]+)$", redirect, re.I ).group(1)
            self.msg( "session id: %s" % sid )
            self.assertEquals( "Session id is incorrect", 8, len(sid) )
            
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/welcome!'''))
        url = "http://acis.zet/welcome!%s" % sid;
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 2 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/profile-overview!'''))
        url = "http://acis.zet/profile-overview!%s" % sid;
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 3 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/name!'''))
        url = "http://acis.zet/name!%s" % sid;
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 4 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''full-name''', u'''\u0412аnя Bячеславoвич Kурманов'''),
            ('''first-name''', '''Иван'''),
            ('''middle-name''', '''Вячеславович'''),
            ('''last-name''', '''Курманов'''),
            ('''name-suffix''', ''''''),
            ('''name-latin''', '''Ivan Vyacheslavovich Kurmanov'''),
            ('''name-variations''', '''Ваня Вячеславович Курманов
Курманов, Ваня Вячеславович
Ваня В. Курманов
Курманов, Ваня В.
Курманов, В. В.
В. В. Курманов
Ваня Курманов
Курманов, Ваня
В. Курманов
Курманов, В.
Курманов, Иван
Иван Курманов
Курманов, И.
И. Курманов
Иван Вячеславович Курманов
Иван В. Курманов
Курманов, Иван Вячеславович
Курманов, Иван В.
Курманов, И. В.
И. В. Курманов'''),
            ('''continue''', '''SAVE AND RETURN TO MENU'''),]

        self.msg("Testing POST to URL: %s" % self.replaceURL('''http://acis.zet/name!'''))
        url = "http://acis.zet/name!%s" % sid;
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 5 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        

        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/piv1/menu!'''))
        url = "http://acis.zet/piv1/menu!%s" % sid
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 6 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)


        
        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/contact!'''))
        url = "http://acis.zet/contact!%s" % sid
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 7 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        params = [
            ('''email''', '''iku@tut.by'''),
            ('''email-pub''', '''true'''),
            ('''homepage''', '''http://ahinea.com/'''),
            ('''phone''', '''234-58-95'''),
            ('''postal''', '''Minsk, 220002,
Chervyakova, 8 - 151'''),]
        self.msg("Testing POST to URL: %s" % self.replaceURL('''http://acis.zet/contact!'''))
        url = "http://acis.zet/contact!%s" % sid
        Validator.validateRequest(self, self.getMethod(), "post", url, params)
        self.post(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 8 failed", 302, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/piv1/menu!'''))
        url = "http://acis.zet/piv1/menu!%s" % sid
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 9 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/affiliations!'''))
        url = "http://acis.zet/affiliations!%s" % sid
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 10 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)



        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/research!'''))
        url = "http://acis.zet/research!%s" % sid
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertTrue("Assert number 11 failed",
                        (self.getResponseCode() == 302 or self.getResponseCode() == 200)
                        )
        start_auto_search = True
        if self.getResponseCode() == 302:
            start_auto_search = False
        Validator.validateResponse(self, self.getMethod(), url, params)

        if start_auto_search:
            params = [
                ('''start-auto-search''', '''yes!'''),
                ]
            self.msg("Testing POST to URL: %s" % self.replaceURL('''http://acis.zet/research/autosuggest!'''))
            url = "http://acis.zet/research/autosuggest!%s" % sid
            Validator.validateRequest(self, self.getMethod(), "post", url, params)
            self.post(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertEquals("Assert number 11.2 failed", 302, self.getResponseCode())
            Validator.validateResponse(self, self.getMethod(), url, params)
        
        while True:
            iteration = 1
            self.msg("Testing URL: %s (no: %d)" % (self.replaceURL('''http://acis.zet/piv1/research/auto/status!'''),
                     iteration) )
            url = "http://acis.zet/piv1/research/auto/status!%s" % sid
            params = None
            Validator.validateRequest(self, self.getMethod(), "get", url, params)
            self.get(url, params)
            self.msg("Response code: %s" % self.getResponseCode())
            self.assertTrue("Assert number 12, iter %d failed" % iteration,
                            self.getResponseCode() == 302 or self.getResponseCode() == 200
                            )
            Validator.validateResponse(self, self.getMethod(), url, params)
            if self.getResponseCode() == 302:
                break
            iteration = iteration+1
        

        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/piv1/research/autosuggest!'''))
        url = "http://acis.zet/piv1/research/autosuggest!%s" % sid
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 14 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)

        
        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/style/main.css'''))
        url = "http://acis.zet/style/main.css"
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        # check for 200 response status
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 14.2 failed", 200, self.getResponseCode())

        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/style/brownish.css'''))
        url = "http://acis.zet/style/brownish.css"
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 14.3 failed", 200, self.getResponseCode())

        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/script/main.js'''))
        url = "http://acis.zet/script/main.js"
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 14.3 failed", 200, self.getResponseCode())

        self.msg("Testing URL: %s" % self.replaceURL('''http://acis.zet/off!'''))
        url = "http://acis.zet/off!%s" % sid
        params = None
        Validator.validateRequest(self, self.getMethod(), "get", url, params)
        self.get(url, params)
        self.msg("Response code: %s" % self.getResponseCode())
        self.assertEquals("Assert number 15 failed", 200, self.getResponseCode())
        Validator.validateResponse(self, self.getMethod(), url, params)
        
        

    # ^^^ Insert new recordings here.  (Do not remove this line.)


# Code to load and run the test
if __name__ == 'main':
    test = acis("acis")
    test.Run()
