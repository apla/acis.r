ACIS SOURCE CODE
================


ABOUT THIS DOCUMENT

Find the latest version of this document at
aacis@nebka.openlib.org:dev/acis/local/dev.README

This document is number 1 source for answers to your questions
concerning ACIS development and maintenance.  Or for hints to these
answers.

Ideally, we should be writing this in a wiki, but I don't have time to
install and maintain it.  If you install a wiki and maintain it, and
import this document in it, I'll be happy to keep it there instead.


OTHER SOURCES OF HELP

Your number 2 source is ACIS documentation (if the question is about
ACIS iteself).

Your number 3 source is source code.  Source code is your most
important helper.  Do not forget you have grep.  It is very useful to
search through the source code.



SEPARATE COMPONENTS

ACIS is not a monolithic program.  It is a large collection of modules,
scripts, configuration files and templates.  And there are several
components which are closely related to ACIS and are required to use
it.  But these components may be used without ACIS, completely
independently.  Therefore their source code is managed and packaged
separately.

So here, in aacis@nebka:dev/, we have four directories, which
correspond to four projects:

  ReDIF-perl/
  AMF-perl/
  RePEc-Index/
  acis/

Each project contains a separate source tree, managed with darcs
(http://darcs.net/) revision control system.


DARCS

Darcs is an easy to use system.  It currently lacks some nice-to-have
features, if compared to SVN or CVS.  It's core advantage is that it
supports purely distributed development.

These component projects and main ACIS source code may be developed
right here in aacis@nebka.  If editing files remotely is not a problem
for you, just edit the needed source files.  After a change is done,
you need to submit it to the repository.  (Repository is where the
source code revisions are stored.)  

You will have to study the userguide of darcs, http://darcs.net/
but you don't have to do it now.


BASIC CODE EDITING PROCEDURE WITH DARCS

For example, let's imagine I had to make a change to the ReDIF-perl
project.  Here are the first steps of the procedure:

   aacis@nebka:~ $ cd dev/ReDIF-perl
   aacis@nebka:~/dev/ReDIF-perl/ $ emacs lib/ReDIF/Parser.pm

(for example) Then you may want to review the changes that you have
made to the code.  Darcs would show it to you in a format similar to
diff:

   aacis@nebka:~/dev/ReDIF-perl/ $ darcs whatsnew

Then you may want to make sure the change didn't break any tests:

   aacis@nebka:~/dev/ReDIF-perl/ $ make tests

Then let's assume the tests passed fine and you want to submit your change:

   aacis@nebka:~/dev/ReDIF-perl/ $ darcs record -am "an improvement to the parsing algorithm"  

The text in quotes is the name of your patch.  It should briefly
explain the substance of the change, or at least it's character.



RELEASING A PACKAGED VERSION

If darcs record worked fine and didn't complain, you may now want to
release a new version package to the public.  Then you do the
following:

   aacis@nebka:~/dev/ReDIF-perl/ $ perl release.pl

That should make a new version number for you and pack a distribution.
The version number would be generated automatically, by incrementing
the previous one by one.  (If it was 0.4 the new version would be 0.5;
if it was 4.44.4 then the new one would be 4.44.5.)  Current version
number is stored in Makefile.PL file.  See release.pl file for details.

The release file is generated in the current directory and its full
name is printed on the standard output.  You may grab it and upload to
http://all.repec.org/ReDIF-perl/ for everyone to use.

This is the most basic development scenario for these three auxilary
projects.  For ACIS itself the darcs part is the same, but it has a
separate package building script.


IF release.pl SCRIPT FAILS

    $ MAKEMAKEFILE=1 perl Makefile.PL
    $ perl release.pl


WORKING ON A LOCAL WORKING COPY OF A PROJECT

 - installing darcs
 - setting local darcs preferences
    - .bashrc: export DARCS_EMAIL=user@machine 
    - .bashrc: export DARCS_DONT_ESCAPE_8BIT=1
 - getting a local copy:
    $ darcs get --set-scripts-executable aacis@nebka.openlib.org:dev/project 
   this would make you a local directory "project" in your current
   dir.

   Replace "project" with 'acis', 'ReDIF-perl' and so on.  (See above)

   Your local copy of a project's source code is called a working
   copy.  


SYNCING YOUR LOCAL CHANGES WITH THE CENTRAL REPOSITORY

When starting a change:
    $ darcs pull -a

After doing a change:
    $ darcs push 
or 
    $ darcs push -a



ADDING FILES TO A PACKAGE 

If you create a new module, script or some other file, you may want to
do two things:

  - add it to the darcs repository. 
        $ darcs add path/file.ext

  - add it to the MANIFEST file
        - see below
        - $ make manifest
        - or add it manually



MANIFEST FILE

There is a MANIFEST file in each of the project directories.  It lists
all files to be packaged in a release of the project.

A useful command: 
   $ make manifest

See also: MANIFEST.SKIP, google for "MANIFEST.SKIP file" or look it up
in the perl camel book




BUILDING AN ACIS PACKAGE

perl build/dist.pl [VERSION]
perl build/dist.pl -f [VERSION]

Some more details are in the build/dist.pl script.



TESTING ACIS

Latest ACIS can be installed on test.acis.openlib.org right from the
development tree.  

   aacis@nebka:~/dev/acis $ install.sh ~/acis

Should upgrade test.acis to the current version in ~/dev/acis.




ACIS PACKAGES: UPGRADE AND FULL

ReDIF-perl, AMF-perl and RePEc-Index may be packaged in their
respective separate release files.  An ACIS distribution may or may not
include these components as well.  (In the extra/ subdir.)

See also: dev/acis/build/dist.pl




SOME OTHER FEATURES OF A REVISION CONTROL SYSTEM

You may roll back the changes submitted recently.  You may view history
of changes (done by you and others).  You may get some previous
revision of a file.  (not very easy with darcs, unfortunately.)  You
may branch the development into stable and unstable tracks, and then
merge after a while.  Several people can work on the same project
independently and concurrently.


